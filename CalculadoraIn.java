{"add.browser.breakpoint":"Add Browser Breakpoint","attach.node.process":"Attach to Node Process","base.cascadeTerminateToConfigurations.label":"A list of debug sessions which, when this debug session is terminated, will also be stopped.","browser.address.description":"IP address or hostname the debugged browser is listening on.","browser.attach.port.description":"Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.","browser.baseUrl.description":"Base URL to resolve paths baseUrl. baseURL is trimmed when mapping URLs to the files on disk. Defaults to the launch URL domain.","browser.browserAttachLocation.description":"Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.","browser.browserLaunchLocation.description":"Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.","browser.cleanUp.description":"What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.","browser.cwd.description":"Optional working directory for the runtime executable.","browser.disableNetworkCache.description":"Controls whether to skip the network cache for each request","browser.env.description":"Optional dictionary of environment key/value pairs for the browser.","browser.file.description":"A local html file to open in the browser","browser.includeDefaultArgs.description":"Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.","browser.inspectUri.description":"Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n","browser.launch.port.description":"Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.","browser.pathMapping.description":"A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk","browser.perScriptSourcemaps.description":"Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.","browser.profileStartup.description":"If true, will start profiling soon as the process launches","browser.restart":"Whether to reconnect if the browser connection is closed","browser.revealPage":"Focus Tab","browser.runtimeArgs.description":"Optional arguments passed to the runtime executable.","browser.runtimeExecutable.description":"Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.","browser.runtimeExecutable.edge.description":"Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.","browser.server.description":"Configures a web server to start up. Takes the same configuration as the 'node' launch task.","browser.skipFiles.description":"An array of file or folder names, or path globs, to skip when debugging.","browser.smartStep.description":"Automatically step through unmapped lines in sourcemapped files. For example, code that TypeScript produces automatically when downcompiling async/await or other features.","browser.sourceMapPathOverrides.description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.","browser.sourceMapRenames.description":"Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.","browser.sourceMaps.description":"Use JavaScript source maps (if they exist).","browser.targetSelection":"Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").","browser.timeout.description":"Retry for this number of milliseconds to connect to the browser. Default is 10000 ms.","browser.url.description":"Will search for a tab with this exact url and attach to it, if found","browser.urlFilter.description":"Will search for a page with this url and attach to it, if found. Can have * wildcards.","browser.userDataDir.description":"By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.","browser.vueComponentPaths":"A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an emp